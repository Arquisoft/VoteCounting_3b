package es.uniovi.asw.dbManagement;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import es.uniovi.asw.dbManagement.model.ColegioData;
import es.uniovi.asw.dbManagement.model.OpcionData;
import es.uniovi.asw.dbManagement.model.PersonaData;
import es.uniovi.asw.dbManagement.model.VotoData;

public class Jdbc {

	/*
	 * Configuration for Oracle private static String DRIVER =
	 * "oracle.jdbc.driver.OracleDriver"; private static String URL =
	 * "jdbc:oracle:thin:@156.35.94.99:1521:DESA"; private static String USER =
	 * ""; private static String PASS = "";
	 */
	/*
	 * Configuration for Hsqldb
	 */
	// private static String DRIVER = "org.hsqldb.jdbcDriver";
	// private static String URL = "jdbc:hsqldb:hsql://localhost";
	// private static String USER = "sa";
	// private static String PASS = "";

	/*
	 * Configuration for h2
	 */
	// private static String BD = "h2";
	private static final String DRIVER = "org.h2.Driver";
	private static String URL = "jdbc:h2:~/test";
	private static String USER = "sa";
	private static String PASS = "";

	static {
		try {
			Class.forName(DRIVER);
			crearDB();
		} catch (ClassNotFoundException e) {
			throw new RuntimeException("Driver not found in classpath", e);
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static Connection getConnection() throws SQLException {
		return DriverManager.getConnection(URL, USER, PASS);
	}

	private static void crearDB()
			throws InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException {
		// ejecutamos el script de creacion de la BD
		String createCensos = "CREATE TABLE IF NOT EXISTS CENSOS(ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL,NOMBRE VARCHAR(255),NIF VARCHAR(255),EMAIL VARCHAR(255),CODCOLEGIOELECTORAL BIGINT,PASSWORD VARCHAR(255))";
		String createOpcion = "CREATE TABLE IF NOT EXISTS OPCION(ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, NOMBRE VARCHAR(255))";
		String createColegioElectoral = "CREATE TABLE IF NOT EXISTS COLEGIOELECTORAL(ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, COMUNIDAD VARCHAR(255), CODIGOCOLEGIOELECTORAL BIGINT)";
		String createVotos = "CREATE TABLE IF NOT EXISTS VOTOS(ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, TIPOVOTO VARCHAR(255), OPCION BIGINT, TOTALVOTOS BIGINT, IDVOTACION BIGINT, CODCOLEGIOELECTORAL BIGINT)";
		Class.forName(DRIVER).newInstance();
		Connection con = getConnection();
		java.sql.Statement stm = con.createStatement();
		stm.execute(createCensos);
		stm.execute("truncate table CENSOS");
		rellenarCensos();
		stm.execute(createOpcion);
		stm.execute("truncate table OPCION");
		rellenarOpcion();
		stm.execute(createColegioElectoral);
		stm.execute("truncate table COLEGIOELECTORAL");
		rellenarColegioElectoral();
		stm.execute(createVotos);
		stm.execute("truncate table VOTOS");
		rellenarVotos();
		stm.close();
		con.close();

	}

	private static void rellenarVotos() {

		List<VotoData> votos = new ArrayList<VotoData>();
		votos.add(new VotoData("ELECTRONICO", 0L, 15L, 1L, 234L));//345,456
		votos.add(new VotoData("ELECTRONICO", 1L, 19L, 1L, 234L));//345,456
		votos.add(new VotoData("ELECTRONICO", 2L, 25L, 1L, 234L));//345,456
		votos.add(new VotoData("ELECTRONICO", 0L, 52L, 1L, 345L));//345,456
		votos.add(new VotoData("ELECTRONICO", 1L, 10L, 1L, 345L));//345,456
		votos.add(new VotoData("ELECTRONICO", 2L, 20L, 1L, 345L));//345,456
		votos.add(new VotoData("ELECTRONICO", 0L, 32L, 1L, 456L));//345,456
		votos.add(new VotoData("ELECTRONICO", 1L, 21L, 1L, 456L));//345,456
		votos.add(new VotoData("ELECTRONICO", 2L, 26L, 1L, 456L));//345,456
		votos.add(new VotoData("MANUAL", 0L, 3L, 1L, 234L));//345,456
		votos.add(new VotoData("MANUAL", 1L, 1L, 1L, 234L));//345,456
		votos.add(new VotoData("MANUAL", 2L, 2L, 1L, 234L));//345,456
		votos.add(new VotoData("MANUAL", 0L, 5L, 1L, 345L));//345,456
		votos.add(new VotoData("MANUAL", 1L, 1L, 1L, 345L));//345,456
		votos.add(new VotoData("MANUAL", 2L, 2L, 1L, 345L));//345,456
		votos.add(new VotoData("MANUAL", 0L, 3L, 1L, 456L));//345,456
		votos.add(new VotoData("MANUAL", 1L, 2L, 1L, 456L));//345,456
		votos.add(new VotoData("MANUAL", 2L, 2L, 1L, 456L));//345,456
		int i=0;
		for (VotoData v : votos) {
			try {
				Connection c = Jdbc.getConnection();
				PreparedStatement ps = c.prepareStatement(
						"INSERT INTO VOTOS VALUES(?,?,?,?,?,?)");
				ps.setLong(1, i);
				ps.setString(2,v.getTipoVoto());
				ps.setLong(3, v.getOpcion());
				ps.setLong(4, v.getTotalVotos());
				ps.setLong(5, v.getIdVotacion());
				ps.setLong(6, v.getCodColegioElectoral());
				ps.execute();
				i++;
				ps.close();
				c.close();

			} catch (SQLException e) {
				//String error = "El votante con nombre: " + v.getNombre() + " y DNI: " + v.getNIF();
				//error = error + " no se ha podido cargar correctamente en la base de datos.";
				//reportR.setLog("ERROR: " + error);
				e.printStackTrace();
			}
		}

		
	}

	private static void rellenarColegioElectoral() {
		
		
		List<ColegioData> colegios = new ArrayList<ColegioData>();
		colegios.add(new ColegioData("Asturias",456));
		colegios.add(new ColegioData("Galicia",345));
		colegios.add(new ColegioData("Cantabria",234));
		int i=0;
		for (ColegioData col : colegios) {
			try {
				Connection c = Jdbc.getConnection();
				PreparedStatement ps = c.prepareStatement(
						"INSERT INTO COLEGIOELECTORAL VALUES(?,?,?)");
				ps.setLong(1, i);
				ps.setString(2,col.getComunidad());
				ps.setInt(3, col.getCodColegioElectoral());
				ps.execute();
				i++;
				ps.close();
				c.close();

			} catch (SQLException e) {
				//String error = "El votante con nombre: " + v.getNombre() + " y DNI: " + v.getNIF();
				//error = error + " no se ha podido cargar correctamente en la base de datos.";
				//reportR.setLog("ERROR: " + error);
				e.printStackTrace();
			}
		}
		
	}

	private static void rellenarOpcion() {
		List<String> opciones = new ArrayList<String>();
		opciones.add("SI");opciones.add("NO");opciones.add("BLANCO");
		OpcionData opdata = new OpcionData(opciones);
		int i=0;
		for (String v : opdata.getOpciones()) {
			try {
				Connection c = Jdbc.getConnection();
				PreparedStatement ps = c.prepareStatement(
						"INSERT INTO OPCION VALUES(?,?)");
				ps.setLong(1, i);
				ps.setString(2, v);
				ps.execute();
				i++;
				ps.close();
				c.close();

			} catch (SQLException e) {
				//String error = "El votante con nombre: " + v.getNombre() + " y DNI: " + v.getNIF();
				//error = error + " no se ha podido cargar correctamente en la base de datos.";
				//reportR.setLog("ERROR: " + error);
				e.printStackTrace();
			}
		}
		
	}

	private static void rellenarCensos() {
		
		List<PersonaData> personas = new ArrayList<PersonaData>();
		personas.add(new PersonaData("Juan Torres Pardo", "90500084Y", "juan@gmail.com", 234, "vbBdN12?"));
		personas.add(new PersonaData("Luis López Fernando", "19160962F", "luis@gmail.com", 345, "LJxsX60Ç"));
		personas.add(new PersonaData("Ana Torres Pardo", "09940449X", "ana@gmail.com", 456, "CXcni43^"));
		for (PersonaData v : personas) {
			try {
				Connection c = Jdbc.getConnection();
				PreparedStatement ps = c.prepareStatement(
						"INSERT INTO CENSOS (NOMBRE, NIF, EMAIL, CODCOLEGIOELECTORAL, PASSWORD) VALUES(?, ?, ?, ?, ?)");
				ps.setString(1, v.getNombre());
				ps.setString(2, v.getNIF());
				ps.setString(3, v.getEmail());
				ps.setInt(4, v.getCodColegioElectoral());
				ps.setString(5, v.getPassword());
				ps.execute();

				ps.close();
				c.close();

			} catch (SQLException e) {
				String error = "El votante con nombre: " + v.getNombre() + " y DNI: " + v.getNIF();
				error = error + " no se ha podido cargar correctamente en la base de datos.";
				//reportR.setLog("ERROR: " + error);
			}
		}
	}


	public static Connection createThreadConnection() throws SQLException {
		Connection con = getConnection();
		con.setAutoCommit(false);
		threadConnection.set(con);
		return con;
	}

	private static ThreadLocal<Connection> threadConnection = new ThreadLocal<Connection>();

	public static Connection getCurrentConnection() {
		return threadConnection.get();
	}

}